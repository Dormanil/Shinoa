<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net</name>
    </assembly>
    <members>
        <member name="T:Discord.DiscordClient">
            <summary> Provides a connection to the DiscordApp service. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Config">
            <summary> Gets the configuration object used to make this client. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Log">
            <summary> Gets the log manager. </summary>
        </member>
        <member name="P:Discord.DiscordClient.ClientAPI">
            <summary> Gets the internal RestClient for the Client API endpoint. </summary>
        </member>
        <member name="P:Discord.DiscordClient.StatusAPI">
            <summary> Gets the internal RestClient for the Status API endpoint. </summary>
        </member>
        <member name="P:Discord.DiscordClient.GatewaySocket">
            <summary> Gets the internal WebSocket for the Gateway event stream. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Services">
            <summary> Gets the service manager used for adding extensions to this client. </summary>
        </member>
        <member name="P:Discord.DiscordClient.MessageQueue">
            <summary> Gets the queue used for outgoing messages, if enabled. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Serializer">
            <summary> Gets the JSON serializer used by this client. </summary>
        </member>
        <member name="P:Discord.DiscordClient.State">
            <summary> Gets the current connection state of this client. </summary>
        </member>
        <member name="P:Discord.DiscordClient.CancelToken">
            <summary> Gets a cancellation token that triggers when the client is manually disconnected. </summary>
        </member>
        <member name="P:Discord.DiscordClient.PrivateUser">
            <summary> Gets the current logged-in user used in private channels. </summary>
        </member>
        <member name="P:Discord.DiscordClient.CurrentUser">
            <summary> Gets information about the current logged-in account. </summary>
        </member>
        <member name="P:Discord.DiscordClient.SessionId">
            <summary> Gets the session id for the current connection. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Status">
            <summary> Gets the status of the current user. </summary>
        </member>
        <member name="P:Discord.DiscordClient.CurrentGame">
            <summary> Gets the game the current user is displayed as playing. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Servers">
            <summary> Gets a collection of all servers this client is a member of. </summary>
        </member>
        <member name="P:Discord.DiscordClient.PrivateChannels">
            <summary> Gets a collection of all private channels this client is a member of. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Regions">
            <summary> Gets a collection of all voice regions currently offered by Discord. </summary>
        </member>
        <member name="M:Discord.DiscordClient.#ctor(System.Action{Discord.DiscordConfigBuilder})">
            <summary> Initializes a new instance of the DiscordClient class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.#ctor">
            <summary> Initializes a new instance of the DiscordClient class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.#ctor(Discord.DiscordConfigBuilder)">
            <summary> Initializes a new instance of the DiscordClient class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.#ctor(Discord.DiscordConfig)">
            <summary> Initializes a new instance of the DiscordClient class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.Connect(System.String,System.String,System.String)">
            <summary> Connects to the Discord server with the provided email and password. </summary>
            <returns> Returns a token that can be optionally stored to speed up future connections. </returns>
        </member>
        <member name="M:Discord.DiscordClient.Connect(System.String)">
            <summary> Connects to the Discord server with the provided token. </summary>
        </member>
        <member name="M:Discord.DiscordClient.Disconnect">
            <summary> Disconnects from the Discord server, canceling any pending requests. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetInvite(System.String)">
            <summary> Gets more info about the provided invite code. </summary>
            <remarks> Supported formats: inviteCode, xkcdCode, https://discord.gg/inviteCode, https://discord.gg/xkcdCode </remarks>
            <returns> The invite object if found, null if not. </returns>
        </member>
        <member name="M:Discord.DiscordClient.CreateServer(System.String,Discord.Region,Discord.ImageType,System.IO.Stream)">
            <summary> Creates a new server with the provided name and region. </summary>
        </member>
        <member name="M:Discord.DiscordClient.ExecuteAndWait(System.Func{System.Threading.Tasks.Task})">
            <summary> Blocking call that will execute the provided async method and wait until the client has been manually stopped. This is mainly intended for use in console applications. </summary>
        </member>
        <member name="M:Discord.DiscordClient.Wait">
            <summary> Blocking call and wait until the client has been manually stopped. This is mainly intended for use in console applications. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.AppName">
            <summary> Gets or sets name of your application, used both for the token cache directory and user agent. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.AppUrl">
            <summary> Gets or sets url to your application, used in the user agent. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.AppVersion">
            <summary> Gets or sets the version of your application, used in the user agent. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.LogLevel">
            <summary> Gets or sets the minimum log level severity that will be sent to the LogMessage event. Warning: setting this to debug will really hurt performance but should help investigate any internal issues. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.LogEvents">
            <summary> Enables or disables the default event logger. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.ConnectionTimeout">
            <summary> Gets or sets the time (in milliseconds) to wait for the websocket to connect and initialize. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.ReconnectDelay">
            <summary> Gets or sets the time (in milliseconds) to wait after an unexpected disconnect before reconnecting. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.FailedReconnectDelay">
            <summary> Gets or sets the time (in milliseconds) to wait after an reconnect fails before retrying. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.CacheToken">
            <summary> Gets or sets whether an encrypted login token should be saved to temp dir after successful login. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.MessageCacheSize">
            <summary> Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero disables the message cache entirely. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.UsePermissionsCache">
            <summary> Gets or sets whether the permissions cache should be used. This makes operations such as User.GetPermissions(Channel), User.ServerPermissions and Channel.Members </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.EnablePreUpdateEvents">
            <summary> Gets or sets whether the a copy of a model is generated on an update event to allow a user to check which properties changed. </summary>
        </member>
        <member name="P:Discord.DiscordConfigBuilder.LogHandler">
            <summary> Gets or sets a handler for all log messages. </summary>
        </member>
        <member name="M:Discord.Format.Escape(System.String)">
            <summary> Removes all special formatting characters from the provided text. </summary>
        </member>
        <member name="M:Discord.Format.Bold(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with bold formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Italics(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with italics formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Underline(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with underline formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Strikeout(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with strikeout formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Code(System.String,System.String)">
            <summary> Returns a markdown-formatted string with strikeout formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Legacy.Mention.User(Discord.User)">
            <summary> Returns the string used to create a user mention. </summary>
        </member>
        <member name="M:Discord.Legacy.Mention.Channel(Discord.Channel)">
            <summary> Returns the string used to create a channel mention. </summary>
        </member>
        <member name="M:Discord.Legacy.Mention.Everyone">
            <summary> Returns the string used to create a mention to everyone in a channel. </summary>
        </member>
        <member name="T:Discord.Net.MessageQueue">
            <summary> Manages an outgoing message queue for DiscordClient. </summary>
        </member>
        <member name="P:Discord.Net.MessageQueue.Count">
            <summary> Gets the current number of queued actions. </summary>
        </member>
        <member name="M:Discord.Net.MessageQueue.Clear">
            <summary> Clears all queued message sends/edits/deletes. </summary>
        </member>
        <member name="P:Discord.Net.WebSockets.WebSocket.Logger">
            <summary> Gets the logger used for this client. </summary>
        </member>
        <member name="P:Discord.Net.WebSockets.WebSocket.State">
            <summary> Gets the current connection state of this client. </summary>
        </member>
        <member name="T:Discord.TaskManager">
            <summary> Helper class used to manage several tasks and keep them in sync. If any single task errors or stops, all other tasks will also be stopped. </summary>
        </member>
        <member name="M:Discord.TaskManager.ThrowException">
            <summary> Throws an exception if one was captured. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.Dispatch">
            <summary> C←S - Used to send most events. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.Heartbeat">
            <summary> C↔S - Used to keep the connection alive and measure latency. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.Identify">
            <summary> C→S - Used to associate a connection with a token and specify configuration. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.StatusUpdate">
            <summary> C→S - Used to update client's status and current game id. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.VoiceStateUpdate">
            <summary> C→S - Used to join a particular voice channel. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.VoiceServerPing">
            <summary> C→S - Used to ensure the server's voice server is alive. Only send this if voice connection fails or suddenly drops. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.Resume">
            <summary> C→S - Used to resume a connection after a redirect occurs. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.Redirect">
            <summary> C←S - Used to notify a client that they must reconnect to another gateway. </summary>
        </member>
        <member name="F:Discord.API.Client.GatewaySocket.OpCodes.RequestGuildMembers">
            <summary> C→S - Used to request all members that were withheld by large_threshold </summary>
        </member>
        <member name="F:Discord.API.Client.VoiceSocket.OpCodes.Identify">
            <summary> C→S - Used to associate a connection with a token. </summary>
        </member>
        <member name="F:Discord.API.Client.VoiceSocket.OpCodes.SelectProtocol">
            <summary> C→S - Used to specify configuration. </summary>
        </member>
        <member name="F:Discord.API.Client.VoiceSocket.OpCodes.Ready">
            <summary> C←S - Used to notify that the voice connection was successful and informs the client of available protocols. </summary>
        </member>
        <member name="F:Discord.API.Client.VoiceSocket.OpCodes.Heartbeat">
            <summary> C↔S - Used to keep the connection alive and measure latency. </summary>
        </member>
        <member name="F:Discord.API.Client.VoiceSocket.OpCodes.SessionDescription">
            <summary> C←S - Used to provide an encryption key to the client. </summary>
        </member>
        <member name="F:Discord.API.Client.VoiceSocket.OpCodes.Speaking">
            <summary> C↔S - Used to inform that a certain user is speaking. </summary>
        </member>
        <member name="P:Discord.ChannelType.Text">
            <summary> A text-only channel. </summary>
        </member>
        <member name="P:Discord.ChannelType.Voice">
            <summary> A voice-only channel. </summary>
        </member>
        <member name="P:Discord.PermissionTarget.Role">
            <summary> A text-only channel. </summary>
        </member>
        <member name="P:Discord.PermissionTarget.User">
            <summary> A voice-only channel. </summary>
        </member>
        <member name="P:Discord.UserStatus.Online">
            <summary> User is currently online and active. </summary>
        </member>
        <member name="P:Discord.UserStatus.Idle">
            <summary> User is currently online but inactive. </summary>
        </member>
        <member name="P:Discord.UserStatus.Offline">
            <summary> User is offline. </summary>
        </member>
        <member name="P:Discord.Channel.Id">
            <summary> Gets the unique identifier for this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Server">
            <summary> Gets the server owning this channel, if this is a public chat. </summary>
        </member>
        <member name="P:Discord.Channel.Recipient">
            <summary> Gets the target user, if this is a private chat. </summary>
        </member>
        <member name="P:Discord.Channel.Name">
            <summary> Gets the name of this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Topic">
            <summary> Gets the topic of this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Position">
            <summary> Gets the position of this channel relative to other channels in this server. </summary>
        </member>
        <member name="P:Discord.Channel.Type">
            <summary> Gets the type of this channel). </summary>
        </member>
        <member name="P:Discord.Channel.IsPrivate">
            <summary> Gets true if this is a private chat with another user. </summary>
        </member>
        <member name="P:Discord.Channel.Mention">
            <summary> Gets the string used to mention this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Messages">
            <summary> Gets a collection of all messages the client has seen posted in this channel. This collection does not guarantee any ordering. </summary>
        </member>
        <member name="P:Discord.Channel.PermissionOverwrites">
            <summary> Gets a collection of all custom permissions used for this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Users">
            <summary> Gets a collection of all users with read access to this channel. </summary>
        </member>
        <member name="M:Discord.Channel.Edit(System.String,System.String,System.Nullable{System.Int32})">
            <summary> Edits this channel, changing only non-null attributes. </summary>
        </member>
        <member name="M:Discord.Channel.GetInvites">
            <summary> Gets all active (non-expired) invites to this server. </summary>
        </member>
        <member name="M:Discord.Channel.CreateInvite(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary> Creates a new invite to this channel. </summary>
            <param name="maxAge"> Time (in seconds) until the invite expires. Set to null to never expire. </param>
            <param name="maxUses"> The max amount  of times this invite may be used. Set to null to have unlimited uses. </param>
            <param name="tempMembership"> If true, a user accepting this invite will be kicked from the server after closing their client. </param>
            <param name="withXkcd"> If true, creates a human-readable link. Not supported if maxAge is set to null. </param>
        </member>
        <member name="M:Discord.Channel.FindUsers(System.String,System.Boolean)">
            <summary> Returns all members of this channel with the specified name. </summary>
            <remarks> Name formats supported: Name, @Name and &lt;@Id&gt;. Search is case-insensitive if exactMatch is false.</remarks>
        </member>
        <member name="P:Discord.Color.R">
            <summary> Gets or sets the red component for this color. </summary>
        </member>
        <member name="P:Discord.Color.G">
            <summary> Gets or sets the green component for this color. </summary>
        </member>
        <member name="P:Discord.Color.B">
            <summary> Gets or sets the blue component for this color. </summary>
        </member>
        <member name="P:Discord.Invite.ServerInfo.Id">
            <summary> Returns the unique identifier of this server. </summary>
        </member>
        <member name="P:Discord.Invite.ServerInfo.Name">
            <summary> Returns the name of this server. </summary>
        </member>
        <member name="P:Discord.Invite.ChannelInfo.Id">
            <summary> Returns the unique identifier of this channel. </summary>
        </member>
        <member name="P:Discord.Invite.ChannelInfo.Name">
            <summary> Returns the name of this channel. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.Id">
            <summary> Returns the unique identifier for this user. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.Name">
            <summary> Returns the name of this user. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.Discriminator">
            <summary> Returns the by-name unique identifier for this user. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.AvatarId">
            <summary> Returns the unique identifier for this user's avatar. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.AvatarUrl">
            <summary> Returns the full path to this user's avatar. </summary>
        </member>
        <member name="P:Discord.Invite.Code">
            <summary> Gets the unique code for this invite. </summary>
        </member>
        <member name="P:Discord.Invite.XkcdCode">
            <summary> Gets, if enabled, an alternative human-readable invite code. </summary>
        </member>
        <member name="P:Discord.Invite.Server">
            <summary> Gets information about the server this invite is attached to. </summary>
        </member>
        <member name="P:Discord.Invite.Channel">
            <summary> Gets information about the channel this invite is attached to. </summary>
        </member>
        <member name="P:Discord.Invite.MaxAge">
            <summary> Gets the time (in seconds) until the invite expires. </summary>
        </member>
        <member name="P:Discord.Invite.Uses">
            <summary> Gets the amount of times this invite has been used. </summary>
        </member>
        <member name="P:Discord.Invite.MaxUses">
            <summary> Gets the max amount of times this invite may be used. </summary>
        </member>
        <member name="P:Discord.Invite.IsRevoked">
            <summary> Returns true if this invite has expired, been destroyed, or you are banned from that server. </summary>
        </member>
        <member name="P:Discord.Invite.IsTemporary">
            <summary> If true, a user accepting this invite will be kicked from the server after closing their client. </summary>
        </member>
        <member name="P:Discord.Invite.CreatedAt">
            <summary> Gets when this invite was created. </summary>
        </member>
        <member name="P:Discord.Invite.Url">
            <summary> Returns a URL for this invite using XkcdCode if available or Id if not. </summary>
        </member>
        <member name="F:Discord.MessageState.Normal">
            <summary> Message did not originate from this session, or was successfully sent. </summary>
        </member>
        <member name="F:Discord.MessageState.Queued">
            <summary> Message is current queued. </summary>
        </member>
        <member name="F:Discord.MessageState.Aborted">
            <summary> Message was deleted before it was sent. </summary>
        </member>
        <member name="F:Discord.MessageState.Failed">
            <summary> Message failed to be sent. </summary>
        </member>
        <member name="P:Discord.Message.Attachment.Id">
            <summary> Unique identifier for this file. </summary>
        </member>
        <member name="P:Discord.Message.Attachment.Size">
            <summary> Size, in bytes, of this file file. </summary>
        </member>
        <member name="P:Discord.Message.Attachment.Filename">
            <summary> Filename of this file. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Url">
            <summary> URL of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Type">
            <summary> Type of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Title">
            <summary> Title for this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Description">
            <summary> Summary of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Author">
            <summary> Returns information about the author of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Provider">
            <summary> Returns information about the providing website of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Thumbnail">
            <summary> Returns the thumbnail of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Video">
            <summary> Returns the video information of this embed. </summary>
        </member>
        <member name="P:Discord.Message.EmbedLink.Url">
            <summary> URL of this embed provider. </summary>
        </member>
        <member name="P:Discord.Message.EmbedLink.Name">
            <summary> Name of this embed provider. </summary>
        </member>
        <member name="P:Discord.Message.File.Url">
            <summary> Download url for this file. </summary>
        </member>
        <member name="P:Discord.Message.File.ProxyUrl">
            <summary> Preview url for this file. </summary>
        </member>
        <member name="P:Discord.Message.File.Width">
            <summary> Width of this file, if it is an image. </summary>
        </member>
        <member name="P:Discord.Message.File.Height">
            <summary> Height of this file, if it is an image. </summary>
        </member>
        <member name="P:Discord.Message.Id">
            <summary> Returns the unique identifier for this message. </summary>
        </member>
        <member name="P:Discord.Message.Channel">
            <summary> Returns the channel this message was sent to. </summary>
        </member>
        <member name="P:Discord.Message.User">
            <summary> Returns the author of this message. </summary>
        </member>
        <member name="P:Discord.Message.IsTTS">
            <summary> Returns true if the message was sent as text-to-speech by someone with permissions to do so. </summary>
        </member>
        <member name="P:Discord.Message.State">
            <summary> Returns the state of this message. Only useful if UseMessageQueue is true. </summary>
        </member>
        <member name="P:Discord.Message.RawText">
            <summary> Returns the raw content of this message as it was received from the server. </summary>
        </member>
        <member name="P:Discord.Message.Text">
            <summary> Returns the content of this message with any special references such as mentions converted. </summary>
        </member>
        <member name="P:Discord.Message.Timestamp">
            <summary> Returns the timestamp for when this message was sent. </summary>
        </member>
        <member name="P:Discord.Message.EditedTimestamp">
            <summary> Returns the timestamp for when this message was last edited. </summary>
        </member>
        <member name="P:Discord.Message.Attachments">
            <summary> Returns the attachments included in this message. </summary>
        </member>
        <member name="P:Discord.Message.Embeds">
            <summary> Returns a collection of all embeded content in this message. </summary>
        </member>
        <member name="P:Discord.Message.MentionedUsers">
            <summary> Returns a collection of all users mentioned in this message. </summary>
        </member>
        <member name="P:Discord.Message.MentionedChannels">
            <summary> Returns a collection of all channels mentioned in this message. </summary>
        </member>
        <member name="P:Discord.Message.MentionedRoles">
            <summary> Returns a collection of all roles mentioned in this message. </summary>
        </member>
        <member name="P:Discord.Message.Server">
            <summary> Returns the server containing the channel this message was sent to. </summary>
        </member>
        <member name="P:Discord.Message.IsAuthor">
            <summary> Returns if this message was sent from the logged-in accounts. </summary>
        </member>
        <member name="M:Discord.Message.IsMentioningMe(System.Boolean)">
            <summary> Returns true if the logged-in user was mentioned. </summary>
        </member>
        <member name="M:Discord.Message.Resolve(System.String)">
            <summary>Resolves all mentions in a provided string to those users, channels or roles' names.</summary>
        </member>
        <member name="P:Discord.ServerPermissions.CreateInstantInvite">
            <summary> If True, a user may create invites. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.BanMembers">
            <summary> If True, a user may ban users from the server. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.KickMembers">
            <summary> If True, a user may kick users from the server. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageRoles">
            <summary> If True, a user may adjust roles. This also implictly grants all other permissions. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageChannels">
            <summary> If True, a user may create, delete and modify channels. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageServer">
            <summary> If True, a user may adjust server properties. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ReadMessages">
            <summary> If True, a user may join channels. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.SendMessages">
            <summary> If True, a user may send messages. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.SendTTSMessages">
            <summary> If True, a user may send text-to-speech messages. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageMessages">
            <summary> If True, a user may delete messages. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.EmbedLinks">
            <summary> If True, Discord will auto-embed links sent by this user. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.AttachFiles">
            <summary> If True, a user may send files. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ReadMessageHistory">
            <summary> If True, a user may read previous messages. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.MentionEveryone">
            <summary> If True, a user may mention @everyone. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.Connect">
            <summary> If True, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.Speak">
            <summary> If True, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.MuteMembers">
            <summary> If True, a user may mute users. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.DeafenMembers">
            <summary> If True, a user may deafen users. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.MoveMembers">
            <summary> If True, a user may move other users between voice channels. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.UseVoiceActivation">
            <summary> If True, a user may use voice activation rather than push-to-talk. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.CreateInstantInvite">
            <summary> If True, a user may create invites. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ManagePermissions">
            <summary> If True, a user may adjust permissions. This also implictly grants all other permissions. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ManageChannel">
            <summary> If True, a user may create, delete and modify this channel. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ReadMessages">
            <summary> If True, a user may join channels. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.SendMessages">
            <summary> If True, a user may send messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.SendTTSMessages">
            <summary> If True, a user may send text-to-speech messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ManageMessages">
            <summary> If True, a user may delete messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.EmbedLinks">
            <summary> If True, Discord will auto-embed links sent by this user. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.AttachFiles">
            <summary> If True, a user may send files. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ReadMessageHistory">
            <summary> If True, a user may read previous messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.MentionEveryone">
            <summary> If True, a user may mention @everyone. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.Connect">
            <summary> If True, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.Speak">
            <summary> If True, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.MuteMembers">
            <summary> If True, a user may mute users. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.DeafenMembers">
            <summary> If True, a user may deafen users. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.MoveMembers">
            <summary> If True, a user may move other users between voice channels. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.UseVoiceActivation">
            <summary> If True, a user may use voice activation rather than push-to-talk. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.CreateInstantInvite">
            <summary> If True, a user may create invites. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.ManagePermissions">
            <summary> If True, a user may adjust permissions. This also implictly grants all other permissions. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.ManageChannel">
            <summary> If True, a user may create, delete and modify this channel. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.ReadMessages">
            <summary> If True, a user may join channels. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.SendMessages">
            <summary> If True, a user may send messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.SendTTSMessages">
            <summary> If True, a user may send text-to-speech messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.ManageMessages">
            <summary> If True, a user may delete messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.EmbedLinks">
            <summary> If True, Discord will auto-embed links sent by this user. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.AttachFiles">
            <summary> If True, a user may send files. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.ReadMessageHistory">
            <summary> If True, a user may read previous messages. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.MentionEveryone">
            <summary> If True, a user may mention @everyone. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.Connect">
            <summary> If True, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.Speak">
            <summary> If True, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.MuteMembers">
            <summary> If True, a user may mute users. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.DeafenMembers">
            <summary> If True, a user may deafen users. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.MoveMembers">
            <summary> If True, a user may move other users between voice channels. </summary>
        </member>
        <member name="P:Discord.ChannelPermissionOverrides.UseVoiceActivation">
            <summary> If True, a user may use voice activation rather than push-to-talk. </summary>
        </member>
        <member name="P:Discord.Profile.Id">
            <summary> Gets the unique identifier for this user. </summary>
        </member>
        <member name="P:Discord.Profile.Name">
            <summary> Gets the global name of this user. </summary>
        </member>
        <member name="P:Discord.Profile.AvatarId">
            <summary> Gets the unique identifier for this user's current avatar. </summary>
        </member>
        <member name="P:Discord.Profile.AvatarUrl">
            <summary> Gets the URL to this user's current avatar. </summary>
        </member>
        <member name="P:Discord.Profile.Discriminator">
            <summary> Gets an id uniquely identifying from others with the same name. </summary>
        </member>
        <member name="P:Discord.Profile.CurrentGame">
            <summary> Gets the name of the game this user is currently playing. </summary>
        </member>
        <member name="P:Discord.Profile.Status">
            <summary> Gets the current status for this user. </summary>
        </member>
        <member name="P:Discord.Profile.Mention">
            <summary> Returns the string used to mention this user. </summary>
        </member>
        <member name="P:Discord.Profile.Email">
            <summary> Gets the email for this user. </summary>
        </member>
        <member name="P:Discord.Profile.IsVerified">
            <summary> Gets if the email for this user has been verified. </summary>
        </member>
        <member name="P:Discord.Role.Id">
            <summary> Gets the unique identifier for this role. </summary>
        </member>
        <member name="P:Discord.Role.Server">
            <summary> Gets the server this role is a member of. </summary>
        </member>
        <member name="P:Discord.Role.Name">
            <summary> Gets the name of this role. </summary>
        </member>
        <member name="P:Discord.Role.IsHoisted">
            <summary> If true, this role is displayed isolated from other users. </summary>
        </member>
        <member name="P:Discord.Role.Position">
            <summary> Gets the position of this channel relative to other channels in this server. </summary>
        </member>
        <member name="P:Discord.Role.IsManaged">
            <summary> Gets whether this role is managed by server (e.g. for Twitch integration) </summary>
        </member>
        <member name="P:Discord.Role.Permissions">
            <summary> Gets the the permissions given to this role. </summary>
        </member>
        <member name="P:Discord.Role.Color">
            <summary> Gets the color of this role. </summary>
        </member>
        <member name="P:Discord.Role.IsEveryone">
            <summary> Gets true if this is the role representing all users in a server. </summary>
        </member>
        <member name="P:Discord.Role.Members">
            <summary> Gets a list of all members in this role. </summary>
        </member>
        <member name="P:Discord.Role.Mention">
            <summary> Gets the string used to mention this role. </summary>
        </member>
        <member name="T:Discord.Server">
            <summary> Represents a Discord server (also known as a guild). </summary>
        </member>
        <member name="P:Discord.Server.Id">
            <summary> Gets the unique identifier for this server. </summary>
        </member>
        <member name="P:Discord.Server.DefaultChannel">
            <summary> Gets the default channel for this server. </summary>
        </member>
        <member name="P:Discord.Server.EveryoneRole">
            <summary> Gets the the role representing all users in a server. </summary>
        </member>
        <member name="P:Discord.Server.Name">
            <summary> Gets the name of this server. </summary>
        </member>
        <member name="P:Discord.Server.Region">
            <summary> Gets the voice region for this server. </summary>
        </member>
        <member name="P:Discord.Server.IconId">
            <summary> Gets the unique identifier for this user's current avatar. </summary>
        </member>
        <member name="P:Discord.Server.SplashId">
            <summary> Gets the unique identifier for this server's custom splash image. </summary>
        </member>
        <member name="P:Discord.Server.AFKTimeout">
            <summary> Gets the amount of time (in seconds) a user must be inactive for until they are automatically moved to the AFK voice channel, if one is set. </summary>
        </member>
        <member name="P:Discord.Server.JoinedAt">
            <summary> Gets the date and time you joined this server. </summary>
        </member>
        <member name="P:Discord.Server.Features">
            <summary> Gets all extra features added to this server. </summary>
        </member>
        <member name="P:Discord.Server.CustomEmojis">
            <summary> Gets all custom emojis on this server. </summary>
        </member>
        <member name="P:Discord.Server.Owner">
            <summary> Gets the user that created this server. </summary>
        </member>
        <member name="P:Discord.Server.IsOwner">
            <summary> Returns true if the current user owns this server. </summary>
        </member>
        <member name="P:Discord.Server.AFKChannel">
            <summary> Gets the AFK voice channel for this server. </summary>
        </member>
        <member name="P:Discord.Server.CurrentUser">
            <summary> Gets the current user in this server. </summary>
        </member>
        <member name="P:Discord.Server.IconUrl">
            <summary> Gets the URL to this server's current icon. </summary>
        </member>
        <member name="P:Discord.Server.SplashUrl">
            <summary> Gets the URL to this servers's splash image. </summary>
        </member>
        <member name="P:Discord.Server.AllChannels">
            <summary> Gets a collection of all channels in this server. </summary>
        </member>
        <member name="P:Discord.Server.TextChannels">
            <summary> Gets a collection of text channels in this server. </summary>
        </member>
        <member name="P:Discord.Server.VoiceChannels">
            <summary> Gets a collection of voice channels in this server. </summary>
        </member>
        <member name="P:Discord.Server.Users">
            <summary> Gets a collection of all members in this server. </summary>
        </member>
        <member name="P:Discord.Server.Roles">
            <summary> Gets a collection of all roles in this server. </summary>
        </member>
        <member name="M:Discord.Server.Edit(System.String,System.String,System.IO.Stream,Discord.ImageType)">
            <summary> Edits this server, changing only non-null attributes. </summary>
        </member>
        <member name="M:Discord.Server.Leave">
            <summary> Leaves this server. This function will fail if you're the owner - use Delete instead. </summary>
        </member>
        <member name="M:Discord.Server.Delete">
            <summary> Deletes this server. This function will fail if you're not the owner - use Leave instead. </summary>
        </member>
        <member name="M:Discord.Server.GetChannel(System.UInt64)">
            <summary> Gets the channel with the provided id and owned by this server, or null if not found. </summary>
        </member>
        <member name="M:Discord.Server.FindChannels(System.String,Discord.ChannelType,System.Boolean)">
            <summary> Returns all channels with the specified server and name. </summary>
            <remarks> Name formats supported: Name, #Name and &lt;#Id&gt;. Search is case-insensitive if exactMatch is false.</remarks>
        </member>
        <member name="M:Discord.Server.CreateChannel(System.String,Discord.ChannelType)">
            <summary> Creates a new channel. </summary>
        </member>
        <member name="M:Discord.Server.ReorderChannels(System.Collections.Generic.IEnumerable{Discord.Channel},Discord.Channel)">
            <summary> Reorders the provided channels and optionally places them after a certain channel. </summary>
        </member>
        <member name="M:Discord.Server.GetInvites">
            <summary> Gets all active (non-expired) invites to this server. </summary>
        </member>
        <member name="M:Discord.Server.CreateInvite(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary> Creates a new invite to the default channel of this server. </summary>
            <param name="maxAge"> Time (in seconds) until the invite expires. Set to null to never expire. </param>
            <param name="maxUses"> The max amount  of times this invite may be used. Set to null to have unlimited uses. </param>
            <param name="tempMembership"> If true, a user accepting this invite will be kicked from the server after closing their client. </param>
            <param name="withXkcd"> If true, creates a human-readable link. Not supported if maxAge is set to null. </param>
        </member>
        <member name="M:Discord.Server.GetRole(System.UInt64)">
            <summary> Gets the role with the provided id and owned by this server, or null if not found. </summary>
        </member>
        <member name="M:Discord.Server.FindRoles(System.String,System.Boolean)">
            <summary> Returns all roles with the specified server and name. </summary>
            <remarks> Search is case-insensitive if exactMatch is false.</remarks>
        </member>
        <member name="M:Discord.Server.CreateRole(System.String,System.Nullable{Discord.ServerPermissions},Discord.Color,System.Boolean)">
            <summary> Creates a new role. </summary>
        </member>
        <member name="M:Discord.Server.ReorderRoles(System.Collections.Generic.IEnumerable{Discord.Role},Discord.Role)">
            <summary> Reorders the provided roles and optionally places them after a certain role. </summary>
        </member>
        <member name="M:Discord.Server.GetUser(System.UInt64)">
            <summary> Gets the user with the provided id and is a member of this server, or null if not found. </summary>
        </member>
        <member name="M:Discord.Server.GetUser(System.String,System.UInt16)">
            <summary> Gets the user with the provided username and discriminator, that is a member of this server, or null if not found. </summary>
        </member>
        <member name="M:Discord.Server.FindUsers(System.String,System.Boolean)">
            <summary> Returns all members of this server with the specified name. </summary>
            <remarks> Name formats supported: Name, @Name and &lt;@Id&gt;. Search is case-insensitive if exactMatch is false.</remarks>
        </member>
        <member name="M:Discord.Server.PruneUsers(System.Int32,System.Boolean)">
            <summary> Kicks all users with an inactivity greater or equal to the provided number of days. </summary>
            <param name="simulate">If true, no pruning will actually be done but instead return the number of users that would be pruned. </param>
        </member>
        <member name="P:Discord.User.Id">
            <summary> Gets the unique identifier for this user. </summary>
        </member>
        <member name="P:Discord.User.Server">
            <summary> Gets the server this user is a member of. </summary>
        </member>
        <member name="P:Discord.User.Name">
            <summary> Gets the name of this user. </summary>
        </member>
        <member name="P:Discord.User.Discriminator">
            <summary> Gets an id uniquely identifying from others with the same name. </summary>
        </member>
        <member name="P:Discord.User.AvatarId">
            <summary> Gets the unique identifier for this user's current avatar. </summary>
        </member>
        <member name="P:Discord.User.CurrentGame">
            <summary> Gets the name of the game this user is currently playing. </summary>
        </member>
        <member name="P:Discord.User.Status">
            <summary> Gets the current status for this user. </summary>
        </member>
        <member name="P:Discord.User.JoinedAt">
            <summary> Gets the datetime that this user joined this server. </summary>
        </member>
        <member name="P:Discord.User.LastActivityAt">
            <summary> Returns the time this user last sent/edited a message, started typing or sent voice data in this server. </summary>
        </member>
        <member name="P:Discord.User.PrivateChannel">
            <summary> Gets the current private channel for this user if one exists. </summary>
        </member>
        <member name="P:Discord.User.Mention">
            <summary> Returns the string used to mention this user. </summary>
        </member>
        <member name="P:Discord.User.IsSelfMuted">
            <summary> Returns true if this user has marked themselves as muted. </summary>
        </member>
        <member name="P:Discord.User.IsSelfDeafened">
            <summary> Returns true if this user has marked themselves as deafened. </summary>
        </member>
        <member name="P:Discord.User.IsServerMuted">
            <summary> Returns true if the server is blocking audio from this user. </summary>
        </member>
        <member name="P:Discord.User.IsServerDeafened">
            <summary> Returns true if the server is blocking audio to this user. </summary>
        </member>
        <member name="P:Discord.User.IsServerSuppressed">
            <summary> Returns true if the server is temporarily blocking audio to/from this user. </summary>
        </member>
        <member name="P:Discord.User.LastOnlineAt">
            <summary> Returns the time this user was last seen online in this server. </summary>
        </member>
        <member name="P:Discord.User.VoiceChannel">
            <summary> Gets this user's current voice channel. </summary>
        </member>
        <member name="P:Discord.User.AvatarUrl">
            <summary> Gets the URL to this user's current avatar. </summary>
        </member>
        <member name="P:Discord.User.Roles">
            <summary> Gets all roles that have been assigned to this user, including the everyone role. </summary>
        </member>
        <member name="P:Discord.User.Channels">
            <summary> Returns a collection of all channels this user has permissions to join on this server. </summary>
        </member>
    </members>
</doc>
